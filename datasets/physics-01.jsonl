{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Make a video of an electromagnetic field with a central red positive charge and two blue negative charges. Show arrows pointing away from the positive charge and towards the negative charges on a black background."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        charge1 = Charge(-1, LEFT + DOWN)\n        charge2 = Charge(2, RIGHT + DOWN)\n        charge3 = Charge(-1, UP)\n        field = ElectricField(charge1, charge2, charge3)\n\n        self.play(Create(charge1), Create(charge2), Create(charge3))\n        self.play(Create(field))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Make a video showing light rays passing through a convex and a concave lens on a black background. Show how the rays bend as they pass through the lenses."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        lens_style = {\"fill_opacity\": 0.5, \"color\": BLUE}\n        a = Lens(-5, 1, **lens_style).shift(LEFT)\n        a2 = Lens(5, 1, **lens_style).shift(RIGHT)\n        b = [\n            Ray(LEFT * 5 + UP * i, RIGHT, 8, [a, a2], color=RED)\n            for i in np.linspace(-2, 2, 10)\n        ]\n\n        self.play(Create(a), Create(a2))\n        for ray in b:\n            self.play(Create(ray))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Make a video showing a YELLOW_A diamond on an orange circle inside a white box on a black background. Animate the diamond to turn yellow and the circle to fill with color, then have them fall at the same time."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(SpaceScene):\n    def construct(self):\n        circle = Circle().shift(UP)\n        circle.set_fill(RED, 1)\n        circle.shift(DOWN + RIGHT)\n\n        rect = Square().shift(UP)\n        rect.rotate(PI / 4)\n        rect.set_fill(YELLOW_A, 1)\n        rect.shift(UP * 2)\n        rect.scale(0.5)\n\n        ground = Line([-4, -3.5, 0], [4, -3.5, 0])\n        wall1 = Line([-4, -3.5, 0], [-4, 3.5, 0])\n        wall2 = Line([4, -3.5, 0], [4, 3.5, 0])\n        walls = VGroup(ground, wall1, wall2)\n        self.add(walls)\n\n        self.play(\n            DrawBorderThenFill(circle),\n            DrawBorderThenFill(rect),\n        )\n        self.make_rigid_body(rect, circle)\n        self.make_static_body(walls)\n        self.wait(5)"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Make a video of a double pendulum with orange balls and white rods on a black background. Animate the pendulum swinging in a chaotic motion, and show blue lines tracing its path."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(SpaceScene):\n    def construct(self):\n        p = MultiPendulum(RIGHT, LEFT)\n        self.add(p)\n        self.make_rigid_body(*p.bobs)\n        p.start_swinging()\n        self.add(TracedPath(p.bobs[-1].get_center, stroke_color=BLUE))\n        self.wait(10)"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Generate a video of a pendulum with multiple orange balls connected by white rods on a black background. Animate the pendulum swinging back and forth, showing the balls moving in a synchronized wave-like motion"}, {"role": "assistant", "content": "\nfrom manim import *\nfrom manim_physics import *\n\nclass GenScene(SpaceScene):\n    def construct(self):\n        pends = VGroup(*[Pendulum(i) for i in np.linspace(1, 5, 7)])\n        self.add(pends)\n        for p in pends:\n            self.Generate_rigid_body(*p.bobs)\n            p.start_swinging()\n        self.wait(10)"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Generate a video showing a 3D grid of blue waves moving in a synchronized pattern on a black background. Animate the waves to create a smooth, undulating motion across the grid."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(60 * DEGREES, -45 * DEGREES)\n        wave = LinearWave()\n        self.add(wave)\n        wave.start_wave()\n        self.wait(3)\n        wave.stop_wave()"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Generate a video showing a 3D grid of blue waves moving on a black background. Animate the waves to create a dynamic, undulating motion across the surface."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(60 * DEGREES, -45 * DEGREES)\n        wave = RadialWave(\n            LEFT * 2 + DOWN * 5,  # Dos fuentes de ondas\n            RIGHT * 2 + DOWN * 5,\n            checkerboard_colors=[BLUE_D],\n            stroke_width=0,\n        )\n        self.add(wave)\n        wave.start_wave()\n        self.wait(3)\n        wave.stop_wave()"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Generate a video showing 4 standing waves with different amplitudes on a black background. Animate the waves to create a smooth, undulating motion across the screen."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        wave1 = StandingWave(1)\n        wave2 = StandingWave(2)\n        wave3 = StandingWave(3)\n        wave4 = StandingWave(4)\n        waves = VGroup(wave1, wave2, wave3, wave4)\n        waves.arrange(DOWN).move_to(ORIGIN)\n        self.add(waves)\n        for wave in waves:\n            wave.start_wave()\n        self.wait()"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Create a video showing an electromagnetic field with a central red positive charge and two blue negative charges. Show arrows pointing away from the positive charge and towards the negative charges on a black background."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        pos_charge = Charge(1, ORIGIN, color=RED)\n        neg_charge1 = Charge(-1, LEFT * 2, color=BLUE)\n        neg_charge2 = Charge(-1, RIGHT * 2, color=BLUE)\n        field = ElectricField(pos_charge, neg_charge1, neg_charge2)\n\n        self.play(Create(pos_charge), Create(neg_charge1), Create(neg_charge2))\n        self.play(Create(field))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Create a video showing a YELLOW_A diamond on an orange circle inside a white box on a black background. Animate the diamond to turn yellow and the circle to fill with color, then have them fall at the same time. But make the circle fall at the left side of the box."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(SpaceScene):\n    def construct(self):\n        circle = Circle().shift(UP).set_fill(ORANGE, 1).shift(DOWN + LEFT)\n        diamond = Square().rotate(PI / 4).set_fill(YELLOW_A, 1).shift(UP * 2 + RIGHT).scale(0.6)\n        box = Rectangle(width=4, height=4).shift(DOWN * 2).set_stroke(WHITE, 3)\n\n        self.add(box)\n        self.play(DrawBorderThenFill(circle), DrawBorderThenFill(diamond))\n        self.make_rigid_body(circle, diamond)\n        self.make_static_body(box)\n        self.wait(5)\n"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Create a video of an electromagnetic field with a central red positive charge and two blue negative charges. Show arrows pointing away from the positive charge and towards the negative charges on a black background."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        pos_charge = Charge(1, ORIGIN, color=RED)\n        neg_charge1 = Charge(-1, LEFT * 2, color=BLUE)\n        neg_charge2 = Charge(-1, RIGHT * 2, color=BLUE)\n        field = ElectricField(pos_charge, neg_charge1, neg_charge2)\n\n        self.play(Create(pos_charge), Create(neg_charge1), Create(neg_charge2))\n        self.play(Create(field))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Create a video of an electromagnetic field with a central red positive charge and two blue negative charges. Show arrows pointing away from the positive charge and towards the negative charges on a black background."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        pos_charge = Charge(1, ORIGIN, color=RED)\n        neg_charge1 = Charge(-1, LEFT * 3, color=BLUE)\n        neg_charge2 = Charge(-1, RIGHT * 3, color=BLUE)\n        field = ElectricField(pos_charge, neg_charge1, neg_charge2)\n\n        self.play(Create(pos_charge), Create(neg_charge1), Create(neg_charge2))\n        self.play(Create(field))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Create a video showing light rays passing through a convex and a concave lens on a black background. Show how the rays bend as they pass through the lenses."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        lens_style = {\"fill_opacity\": 0.5, \"color\": BLUE}\n        convex_lens = Lens(-5, 1, **lens_style).shift(LEFT)\n        concave_lens = Lens(5, 1, **lens_style).shift(RIGHT)\n        rays = [\n            Ray(LEFT * 5 + UP * i, RIGHT, 8, [convex_lens, concave_lens], color=RED)\n            for i in np.linspace(-2, 2, 10)\n        ]\n\n        self.play(Create(convex_lens), Create(concave_lens))\n        for ray in rays:\n            self.play(Create(ray))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Create a video showing light rays passing through a convex and a concave lens on a black background. Show how the rays bend as they pass through the lenses."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        lens_style = {\"fill_opacity\": 0.5, \"color\": GREEN}\n        convex_lens = Lens(-5, 1, **lens_style).shift(LEFT)\n        concave_lens = Lens(5, 1, **lens_style).shift(RIGHT)\n        rays = [\n            Ray(LEFT * 5 + UP * i, RIGHT, 8, [convex_lens, concave_lens], color=YELLOW)\n            for i in np.linspace(-2, 2, 10)\n        ]\n\n        self.play(Create(convex_lens), Create(concave_lens))\n        for ray in rays:\n            self.play(Create(ray))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Create a video showing a YELLOW_A diamond on an orange circle inside a white box on a black background. Animate the diamond to turn yellow and the circle to fill with color, then have them fall at the same time."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(SpaceScene):\n    def construct(self):\n        circle = Circle().shift(UP).set_fill(ORANGE, 1).shift(DOWN + LEFT)\n        diamond = Square().rotate(PI / 4).set_fill(YELLOW_A, 1).shift(UP * 2 + RIGHT).scale(0.6)\n        box = Rectangle(width=4, height=4).shift(DOWN * 2).set_stroke(WHITE, 3)\n\n        self.add(box)\n        self.play(DrawBorderThenFill(circle), DrawBorderThenFill(diamond))\n        self.make_rigid_body(circle, diamond)\n        self.make_static_body(box)\n        self.wait(5)\n"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Create a video showing a YELLOW_A diamond on an orange circle inside a white box on a black background. Animate the diamond to turn yellow and the circle to fill with color, then have them fall at the same time."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(SpaceScene):\n    def construct(self):\n        circle = Circle().shift(UP).set_fill(ORANGE, 1).shift(DOWN + RIGHT)\n        diamond = Square().rotate(PI / 4).set_fill(YELLOW_A, 1).shift(UP * 2 + LEFT).scale(0.6)\n        box = Rectangle(width=4, height=4).shift(DOWN * 2).set_stroke(WHITE, 3)\n\n        self.add(box)\n        self.play(DrawBorderThenFill(circle), DrawBorderThenFill(diamond))\n        self.make_rigid_body(circle, diamond)\n        self.make_static_body(box)\n        self.wait(5)\n"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Make a video of an electromagnetic field with a central red positive charge and two blue negative charges. Show arrows pointing away from the positive charge and towards the negative charges on a black background."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        pos_charge = Charge(1, ORIGIN, color=RED)\n        neg_charge1 = Charge(-1, LEFT * 2, color=BLUE)\n        neg_charge2 = Charge(-1, RIGHT * 2, color=BLUE)\n        field = ElectricField(pos_charge, neg_charge1, neg_charge2)\n\n        self.play(Create(pos_charge), Create(neg_charge1), Create(neg_charge2))\n        self.play(Create(field))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "I need a video of an electromagnetic field with a central red positive charge and two blue negative charges. Show arrows pointing away from the positive charge and towards the negative charges on a black background."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        pos_charge = Charge(1, ORIGIN, color=RED)\n        neg_charge1 = Charge(-1, LEFT * 3, color=BLUE)\n        neg_charge2 = Charge(-1, RIGHT * 3, color=BLUE)\n        field = ElectricField(pos_charge, neg_charge1, neg_charge2)\n\n        self.play(Create(pos_charge), Create(neg_charge1), Create(neg_charge2))\n        self.play(Create(field))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "I need a video showing light rays passing through a convex and a concave lens on a black background. Show how the rays bend as they pass through the lenses."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        lens_style = {\"fill_opacity\": 0.5, \"color\": BLUE}\n        convex_lens = Lens(-5, 1, **lens_style).shift(LEFT)\n        concave_lens = Lens(5, 1, **lens_style).shift(RIGHT)\n        rays = [\n            Ray(LEFT * 5 + UP * i, RIGHT, 8, [convex_lens, concave_lens], color=RED)\n            for i in np.linspace(-2, 2, 10)\n        ]\n\n        self.play(Create(convex_lens), Create(concave_lens))\n        for ray in rays:\n            self.play(Create(ray))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "I need a video showing light rays passing through a convex and a concave lens on a black background. Show how the rays bend as they pass through the lenses."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        lens_style = {\"fill_opacity\": 0.5, \"color\": GREEN}\n        convex_lens = Lens(-5, 1, **lens_style).shift(LEFT)\n        concave_lens = Lens(5, 1, **lens_style).shift(RIGHT)\n        rays = [\n            Ray(LEFT * 5 + UP * i, RIGHT, 8, [convex_lens, concave_lens], color=YELLOW)\n            for i in np.linspace(-2, 2, 10)\n        ]\n\n        self.play(Create(convex_lens), Create(concave_lens))\n        for ray in rays:\n            self.play(Create(ray))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Make a video showing a YELLOW_A diamond on an orange circle inside a white box on a black background. Animate the diamond to turn yellow and the circle to fill with color, then have them fall at the same time."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(SpaceScene):\n    def construct(self):\n        circle = Circle().shift(UP).set_fill(ORANGE, 1).shift(DOWN + LEFT)\n        diamond = Square().rotate(PI / 4).set_fill(YELLOW_A, 1).shift(UP * 2 + RIGHT).scale(0.6)\n        box = Rectangle(width=4, height=4).shift(DOWN * 2).set_stroke(WHITE, 3)\n\n        self.add(box)\n        self.play(DrawBorderThenFill(circle), DrawBorderThenFill(diamond))\n        self.make_rigid_body(circle, diamond)\n        self.make_static_body(box)\n        self.wait(5)\n"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Make a video showing a YELLOW_A diamond on an orange circle inside a white box on a black background. Animate the diamond to turn yellow and the circle to fill with color, then have them fall at the same time."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(SpaceScene):\n    def construct(self):\n        circle = Circle().shift(UP).set_fill(ORANGE, 1).shift(DOWN + RIGHT)\n        diamond = Square().rotate(PI / 4).set_fill(YELLOW_A, 1).shift(UP * 2 + LEFT).scale(0.6)\n        box = Rectangle(width=4, height=4).shift(DOWN * 2).set_stroke(WHITE, 3)\n\n        self.add(box)\n        self.play(DrawBorderThenFill(circle), DrawBorderThenFill(diamond))\n        self.make_rigid_body(circle, diamond)\n        self.make_static_body(box)\n        self.wait(5)\n"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Create a video of an electromagnetic field with a central red positive charge and two blue negative charges. Show arrows pointing away from the positive charge and towards the negative charges on a black background."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        pos_charge = Charge(1, ORIGIN, color=RED)\n        neg_charge1 = Charge(-1, LEFT * 2.5, color=BLUE)\n        neg_charge2 = Charge(-1, RIGHT * 2.5, color=BLUE)\n        field = ElectricField(pos_charge, neg_charge1, neg_charge2)\n\n        self.play(Create(pos_charge), Create(neg_charge1), Create(neg_charge2))\n        self.play(Create(field))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Create a video of an electromagnetic field with a central red positive charge and two blue negative charges. Show arrows pointing away from the positive charge and towards the negative charges on a black background."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        pos_charge = Charge(1, ORIGIN, color=RED)\n        neg_charge1 = Charge(-1, LEFT * 3.5, color=BLUE)\n        neg_charge2 = Charge(-1, RIGHT * 3.5, color=BLUE)\n        field = ElectricField(pos_charge, neg_charge1, neg_charge2)\n\n        self.play(Create(pos_charge), Create(neg_charge1), Create(neg_charge2))\n        self.play(Create(field))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Make a video showing light rays passing through a convex and a concave lens on a black background. Show how the rays bend as they pass through the lenses."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        lens_style = {\"fill_opacity\": 0.5, \"color\": BLUE}\n        convex_lens = Lens(-5, 1, **lens_style).shift(LEFT)\n        concave_lens = Lens(5, 1, **lens_style).shift(RIGHT)\n        rays = [\n            Ray(LEFT * 5 + UP * i, RIGHT, 8, [convex_lens, concave_lens], color=RED)\n            for i in np.linspace(-2, 2, 12)\n        ]\n\n        self.play(Create(convex_lens), Create(concave_lens))\n        for ray in rays:\n            self.play(Create(ray))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Make a video showing light rays passing through a convex and a concave lens on a black background. Show how the rays bend as they pass through the lenses."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        lens_style = {\"fill_opacity\": 0.5, \"color\": GREEN}\n        convex_lens = Lens(-5, 1, **lens_style).shift(LEFT)\n        concave_lens = Lens(5, 1, **lens_style).shift(RIGHT)\n        rays = [\n            Ray(LEFT * 5 + UP * i, RIGHT, 8, [convex_lens, concave_lens], color=YELLOW)\n            for i in np.linspace(-2, 2, 8)\n        ]\n\n        self.play(Create(convex_lens), Create(concave_lens))\n        for ray in rays:\n            self.play(Create(ray))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Make a video showing a YELLOW_A diamond on an orange circle inside a white box on a black background. Animate the diamond to turn yellow and the circle to fill with color, then have them fall at the same time."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(SpaceScene):\n    def construct(self):\n        circle = Circle().shift(UP).set_fill(ORANGE, 1).shift(DOWN + LEFT)\n        diamond = Square().rotate(PI / 4).set_fill(YELLOW_A, 1).shift(UP * 2 + RIGHT).scale(0.6)\n        box = Rectangle(width=4, height=4).shift(DOWN * 2).set_stroke(WHITE, 3)\n\n        self.add(box)\n        self.play(DrawBorderThenFill(circle), DrawBorderThenFill(diamond))\n        self.make_rigid_body(circle, diamond)\n        self.make_static_body(box)\n        self.wait(5)\n"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Make a video showing a YELLOW_A diamond on an orange circle inside a white box on a black background. Animate the diamond to turn yellow and the circle to fill with color, then have them fall at the same time."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(SpaceScene):\n    def construct(self):\n        circle = Circle().shift(UP).set_fill(ORANGE, 1).shift(DOWN + RIGHT)\n        diamond = Square().rotate(PI / 4).set_fill(YELLOW_A, 1).shift(UP * 2 + LEFT).scale(0.6)\n        box = Rectangle(width=4, height=4).shift(DOWN * 2).set_stroke(WHITE, 3)\n\n        self.add(box)\n        self.play(DrawBorderThenFill(circle), DrawBorderThenFill(diamond))\n        self.make_rigid_body(circle, diamond)\n        self.make_static_body(box)\n        self.wait(5)\n"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Create a video of an electromagnetic field with a central red positive charge and two blue negative charges. Show arrows pointing away from the positive charge and towards the negative charges on a black background."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        pos_charge = Charge(1, ORIGIN, color=RED)\n        neg_charge1 = Charge(-1, LEFT * 2.5, color=BLUE)\n        neg_charge2 = Charge(-1, RIGHT * 2.5, color=BLUE)\n        field = ElectricField(pos_charge, neg_charge1, neg_charge2)\n\n        self.play(Create(pos_charge), Create(neg_charge1), Create(neg_charge2))\n        self.play(Create(field))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Generate a video of an electromagnetic field with a central red positive charge and two blue negative charges. Show arrows pointing away from the positive charge and towards the negative charges on a black background."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        pos_charge = Charge(1, ORIGIN, color=RED)\n        neg_charge1 = Charge(-1, LEFT * 3.5, color=BLUE)\n        neg_charge2 = Charge(-1, RIGHT * 3.5, color=BLUE)\n        field = ElectricField(pos_charge, neg_charge1, neg_charge2)\n\n        self.play(Create(pos_charge), Create(neg_charge1), Create(neg_charge2))\n        self.play(Create(field))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Generate a video showing light rays passing through a convex and a concave lens on a black background. Show how the rays bend as they pass through the lenses."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        lens_style = {\"fill_opacity\": 0.5, \"color\": BLUE}\n        convex_lens = Lens(-5, 1, **lens_style).shift(LEFT)\n        concave_lens = Lens(5, 1, **lens_style).shift(RIGHT)\n        rays = [\n            Ray(LEFT * 5 + UP * i, RIGHT, 8, [convex_lens, concave_lens], color=RED)\n            for i in np.linspace(-2, 2, 12)\n        ]\n\n        self.play(Create(convex_lens), Create(concave_lens))\n        for ray in rays:\n            self.play(Create(ray))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Generate a video showing light rays passing through a convex and a concave lens on a black background. Show how the rays bend as they pass through the lenses."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        lens_style = {\"fill_opacity\": 0.5, \"color\": GREEN}\n        convex_lens = Lens(-5, 1, **lens_style).shift(LEFT)\n        concave_lens = Lens(5, 1, **lens_style).shift(RIGHT)\n        rays = [\n            Ray(LEFT * 5 + UP * i, RIGHT, 8, [convex_lens, concave_lens], color=YELLOW)\n            for i in np.linspace(-2, 2, 8)\n        ]\n\n        self.play(Create(convex_lens), Create(concave_lens))\n        for ray in rays:\n            self.play(Create(ray))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Generate a video showing a YELLOW_A diamond on an orange circle inside a white box on a black background. Animate the diamond to turn yellow and the circle to fill with color, then have them fall at the same time."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(SpaceScene):\n    def construct(self):\n        circle = Circle().shift(UP).set_fill(ORANGE, 1).shift(DOWN + LEFT)\n        diamond = Square().rotate(PI / 4).set_fill(YELLOW_A, 1).shift(UP * 2 + RIGHT).scale(0.6)\n        box = Rectangle(width=4, height=4).shift(DOWN * 2).set_stroke(WHITE, 3)\n\n        self.add(box)\n        self.play(DrawBorderThenFill(circle), DrawBorderThenFill(diamond))\n        self.make_rigid_body(circle, diamond)\n        self.make_static_body(box)\n        self.wait(5)\n"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Create a video showing a YELLOW_A diamond on an orange circle inside a white box on a black background. Animate the diamond to turn yellow and the circle to fill with color, then have them fall at the same time."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(SpaceScene):\n    def construct(self):\n        circle = Circle().shift(UP).set_fill(ORANGE, 1).shift(DOWN + RIGHT)\n        diamond = Square().rotate(PI / 4).set_fill(YELLOW_A, 1).shift(UP * 2 + LEFT).scale(0.6)\n        box = Rectangle(width=4, height=4).shift(DOWN * 2).set_stroke(WHITE, 3)\n\n        self.add(box)\n        self.play(DrawBorderThenFill(circle), DrawBorderThenFill(diamond))\n        self.make_rigid_body(circle, diamond)\n        self.make_static_body(box)\n        self.wait(5)\n"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Create a video of an electromagnetic field with a central green positive charge and two yellow negative charges. Show arrows pointing away from the positive charge and towards the negative charges on a black background."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        pos_charge = Charge(1, ORIGIN, color=GREEN)\n        neg_charge1 = Charge(-1, LEFT * 2, color=YELLOW)\n        neg_charge2 = Charge(-1, RIGHT * 2, color=YELLOW)\n        field = ElectricField(pos_charge, neg_charge1, neg_charge2)\n\n        self.play(Create(pos_charge), Create(neg_charge1), Create(neg_charge2))\n        self.play(Create(field))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Create a video showing light rays passing through a convex and a concave lens on a black background. Show how the rays bend as they pass through the lenses. Use purple for the rays and yellow for the lenses."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(Scene):\n    def construct(self):\n        lens_style = {\"fill_opacity\": 0.5, \"color\": YELLOW}\n        convex_lens = Lens(-5, 1, **lens_style).shift(LEFT)\n        concave_lens = Lens(5, 1, **lens_style).shift(RIGHT)\n        rays = [\n            Ray(LEFT * 5 + UP * i, RIGHT, 8, [convex_lens, concave_lens], color=PURPLE)\n            for i in np.linspace(-2, 2, 10)\n        ]\n\n        self.play(Create(convex_lens), Create(concave_lens))\n        for ray in rays:\n            self.play(Create(ray))"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Create a video showing a green diamond on a blue circle inside a red box on a black background. Animate the diamond to turn green and the circle to fill with color, then have them fall at the same time."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(SpaceScene):\n    def construct(self):\n        circle = Circle().shift(UP).set_fill(BLUE, 1).shift(DOWN + LEFT)\n        diamond = Square().rotate(PI / 4).set_fill(GREEN, 1).shift(UP * 2 + RIGHT).scale(0.6)\n        box = Rectangle(width=4, height=4).shift(DOWN * 2).set_stroke(RED, 3)\n\n        self.add(box)\n        self.play(DrawBorderThenFill(circle), DrawBorderThenFill(diamond))\n        self.make_rigid_body(circle, diamond)\n        self.make_static_body(box)\n        self.wait(5)\n"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Create a video of a double pendulum with green balls and red rods on a black background. Animate the pendulum swinging in a chaotic motion, and show yellow lines tracing its path."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(SpaceScene):\n    def construct(self):\n        p = MultiPendulum(RIGHT, LEFT, bob_style={'color': GREEN}, rod_style={'color': RED})\n        self.add(p)\n        self.make_rigid_body(*p.bobs)\n        p.start_swinging()\n        self.add(TracedPath(p.bobs[-1].get_center, stroke_color=YELLOW))\n        self.wait(10)"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Generate a video of a pendulum with multiple green balls connected by red rods on a black background. Animate the pendulum swinging back and forth, showing the balls moving in a synchronized wave-like motion."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(SpaceScene):\n    def construct(self):\n        pends = VGroup(*[Pendulum(i, bob_style={'color': GREEN}, rod_style={'color': RED}) for i in np.linspace(1, 5, 7)])\n        self.add(pends)\n        for p in pends:\n            self.make_rigid_body(*p.bobs)\n            p.start_swinging()\n        self.wait(10)"}]}
{"messages": [{"role": "system", "content": "Create Manim scripts for animations in Python. Generate code, not text. You can also include physics simulations using the classes provided by `manim_physics`. The available classes for physics simulations are: `Charge`, `ElectricField`, `MagneticField`, `Wire`, `Lens`, `Ray`, `Space`, `SpaceScene`, `MultiPendulum`, `Pendulum`, `LinearWave`, `RadialWave`, and `StandingWave`."}, {"role": "user", "content": "Generate a video showing a 3D grid of red waves moving in a synchronized pattern on a black background. Animate the waves to create a smooth, undulating motion across the grid."}, {"role": "assistant", "content": "from manim import *\nfrom manim_physics import *\n\nclass GenScene(ThreeDScene):\n    def construct(self):\n        self.set_camera_orientation(60 * DEGREES, -45 * DEGREES)\n        wave = LinearWave(color=RED)\n        self.add(wave)\n        wave.start_wave()\n        self.wait(3)\n        wave.stop_wave()"}]}